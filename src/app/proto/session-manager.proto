// Copyright (c) 2025 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

syntax = "proto3";

// TODO: Change naming to DedicateServerProvider after SNK is ready for testing.

option csharp_namespace = "AccelByte.Session.manager";
option go_package = "accelbyte.net/session/manager";
option java_multiple_files = true;
option java_package = "net.accelbyte.session.manager";

package accelbyte.session.manager;
// Version v1.0.0

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";

service SessionManager {
    rpc OnSessionCreated(SessionCreatedRequest) returns (SessionResponse);
    rpc OnSessionUpdated(SessionUpdatedRequest) returns (google.protobuf.Empty);
    rpc OnSessionDeleted(SessionDeletedRequest) returns (google.protobuf.Empty);
    rpc OnPartyCreated(PartyCreatedRequest) returns (PartyResponse);
    rpc OnPartyUpdated(PartyUpdatedRequest) returns (google.protobuf.Empty);
    rpc OnPartyDeleted(PartyDeletedRequest) returns (google.protobuf.Empty);
}

enum Action {
    None = 0;
    SessionCreated          = 1;
    SessionDeleted          = 2;
    SessionUserInvited      = 4;
    SessionUserRejected     = 8;
    SessionUserKicked       = 16;
    SessionUserJoined       = 32;
    SessionMembersChanged   = 64;
    SessionUpdated          = 128;
    SessionInviteTimeout    = 256;
    SessionInviteCancelled  = 512;
    DSStatusChanged         = 1024;
    SessionSync             = 2048;
    SessionStorageUpdated   = 4096;
    SessionUserLeave        = 8192;
    SessionUserConnected    = 16384;
    SessionUserDisconnected = 32768;
    SessionUserDropped      = 65536;
    SessionLeaderPromoted   = 131072;
}

message SessionCreatedRequest {
    GameSession session = 1;
}

message SessionUpdatedRequest {
    GameSession session_old = 1;
    GameSession session_new = 2;
    Action action = 3;
}

message SessionDeletedRequest {
    GameSession session = 1;
}

message SessionResponse {
    GameSession session = 1;
}

message Configuration {
    google.protobuf.Struct attributes = 1;
    bool auto_join = 2;
    int32 inactive_timeout = 3;
    int32 invite_timeout = 4;
    string joinability = 5;
    int32 leader_election_grace_period = 6;
    int32 max_players = 7;
    int32 min_players = 8;
    bool persistent = 9;
    bool text_chat = 10;
    bool disable_resend_invite = 11;
    string type = 12;
}

message User {
    string id = 1;
    string status = 2;
    string status_v2 = 3;
    google.protobuf.Timestamp updated_at = 4;
    string platform_id = 5;
    string platform_user_id = 6;
    string previous_status = 7;
}

message BaseSession {
    bool is_active = 1;
    bool is_full = 2;
    int32 version = 3;
    string id = 4;
    string namespace = 5;
    string created_by = 6;
    string configuration_name = 7;
    string leader_id = 8;
    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp expired_at = 10;
    google.protobuf.Timestamp updated_at = 11;
    google.protobuf.Struct attributes = 12;
    google.protobuf.Struct storages = 13;
    Configuration configuration = 14;
    repeated User members = 15;
}

message DSInformation {
    google.protobuf.Timestamp requested_at = 1;
    string status = 2;
    string status_v2 = 3;
}

message PartyMember {
    string party_id = 1;
    repeated string user_ids = 2;
}

message Team {
    repeated string user_ids = 1;
    repeated PartyMember party_members = 2;
    string team_id = 3;
}

message GameSession {
    int32 retry = 1;
    int64 processing_time = 2;
    string match_pool = 3;
    string backfill_ticket_id = 4;
    string server_name = 5;
    string step = 6;
    string code = 7;
    repeated string ticket_ids = 8;
    DSInformation ds_information = 9;
    BaseSession session = 10;
    repeated Team teams = 11;
    string secret = 12;
}

message PartySession {
    BaseSession session = 1;
    string code = 2;
}

message PartyCreatedRequest {
    PartySession session = 1;
}

message PartyUpdatedRequest {
    PartySession session_old = 1;
    PartySession session_new = 2;
    Action action = 3;
}

message PartyDeletedRequest {
    PartySession session = 1;
}

message PartyResponse {
    PartySession session = 1;
}
